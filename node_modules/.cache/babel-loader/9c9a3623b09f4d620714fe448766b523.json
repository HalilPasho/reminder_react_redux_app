{"ast":null,"code":"import { startOfWeek, endOfWeek, startOfMonth, endOfMonth, getISOWeek, addDays, isSameMonth, isToday } from 'date-fns';\nexport var monthTitles = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];\nexport var dayTitles = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];\nexport function startOfCalendar(date) {\n  return startOfWeek(startOfMonth(date));\n}\nexport function endOfCalendar(date) {\n  return endOfWeek(endOfMonth(date));\n}\nexport function getDayId(date) {\n  return \"\".concat(date.getFullYear(), \"_\").concat(date.getMonth(), \"_\").concat(date.getDate());\n}\nexport function createMonthCalendar(date) {\n  var day = startOfCalendar(date);\n  var end = endOfCalendar(date);\n  var month = {\n    id: \"\".concat(day.getFullYear(), \"_\").concat(day.getMonth()),\n    title: \"\".concat(monthTitles[date.getMonth()], \" \").concat(date.getFullYear()),\n    weeks: []\n  };\n\n  while (day <= end) {\n    var weekNumber = getISOWeek(endOfWeek(day));\n    var week = {\n      id: \"\".concat(day.getFullYear(), \"_\").concat(weekNumber),\n      number: weekNumber,\n      days: []\n    };\n\n    for (var i = 0; i < 7; i++) {\n      week.days.push({\n        id: getDayId(day),\n        date: day,\n        isSameMonth: isSameMonth(day, date),\n        isToday: isToday(day)\n      });\n      day = addDays(day, 1);\n    }\n\n    month.weeks.push(week);\n  }\n\n  return month;\n}","map":{"version":3,"sources":["/home/halil/Desktop/react-reminder-calendar/src/components/calendar/view-model/calendar.view-model.js"],"names":["startOfWeek","endOfWeek","startOfMonth","endOfMonth","getISOWeek","addDays","isSameMonth","isToday","monthTitles","dayTitles","startOfCalendar","date","endOfCalendar","getDayId","getFullYear","getMonth","getDate","createMonthCalendar","day","end","month","id","title","weeks","weekNumber","week","number","days","i","push"],"mappings":"AAAA,SACEA,WADF,EAEEC,SAFF,EAGEC,YAHF,EAIEC,UAJF,EAKEC,UALF,EAMEC,OANF,EAOEC,WAPF,EAQEC,OARF,QASO,UATP;AAWA,OAAO,IAAMC,WAAW,GAAG,CAAC,SAAD,EAAY,UAAZ,EAAwB,OAAxB,EAAiC,OAAjC,EAA0C,KAA1C,EAAiD,MAAjD,EAAyD,MAAzD,EAAiE,QAAjE,EAA2E,WAA3E,EAAwF,SAAxF,EAAmG,UAAnG,EAA+G,UAA/G,CAApB;AACP,OAAO,IAAMC,SAAS,GAAG,CAAC,KAAD,EAAQ,KAAR,EAAe,KAAf,EAAsB,KAAtB,EAA6B,KAA7B,EAAoC,KAApC,EAA2C,KAA3C,CAAlB;AAEP,OAAO,SAASC,eAAT,CAAyBC,IAAzB,EAA+B;AACpC,SAAOX,WAAW,CAACE,YAAY,CAACS,IAAD,CAAb,CAAlB;AACD;AAED,OAAO,SAASC,aAAT,CAAuBD,IAAvB,EAA6B;AAClC,SAAOV,SAAS,CAACE,UAAU,CAACQ,IAAD,CAAX,CAAhB;AACD;AAED,OAAO,SAASE,QAAT,CAAkBF,IAAlB,EAAwB;AAC7B,mBAAUA,IAAI,CAACG,WAAL,EAAV,cAAgCH,IAAI,CAACI,QAAL,EAAhC,cAAmDJ,IAAI,CAACK,OAAL,EAAnD;AACD;AAED,OAAO,SAASC,mBAAT,CAA6BN,IAA7B,EAAmC;AACxC,MAAIO,GAAG,GAAGR,eAAe,CAACC,IAAD,CAAzB;AACA,MAAMQ,GAAG,GAAGP,aAAa,CAACD,IAAD,CAAzB;AAEA,MAAMS,KAAK,GAAG;AACZC,IAAAA,EAAE,YAAKH,GAAG,CAACJ,WAAJ,EAAL,cAA0BI,GAAG,CAACH,QAAJ,EAA1B,CADU;AAEZO,IAAAA,KAAK,YAAKd,WAAW,CAACG,IAAI,CAACI,QAAL,EAAD,CAAhB,cAAqCJ,IAAI,CAACG,WAAL,EAArC,CAFO;AAGZS,IAAAA,KAAK,EAAE;AAHK,GAAd;;AAMA,SAAOL,GAAG,IAAIC,GAAd,EAAmB;AACjB,QAAMK,UAAU,GAAGpB,UAAU,CAACH,SAAS,CAACiB,GAAD,CAAV,CAA7B;AACA,QAAMO,IAAI,GAAG;AACXJ,MAAAA,EAAE,YAAKH,GAAG,CAACJ,WAAJ,EAAL,cAA0BU,UAA1B,CADS;AAEXE,MAAAA,MAAM,EAAEF,UAFG;AAGXG,MAAAA,IAAI,EAAE;AAHK,KAAb;;AAMA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,CAApB,EAAuBA,CAAC,EAAxB,EAA4B;AAC1BH,MAAAA,IAAI,CAACE,IAAL,CAAUE,IAAV,CAAe;AACbR,QAAAA,EAAE,EAAER,QAAQ,CAACK,GAAD,CADC;AAEbP,QAAAA,IAAI,EAAEO,GAFO;AAGbZ,QAAAA,WAAW,EAAEA,WAAW,CAACY,GAAD,EAAMP,IAAN,CAHX;AAIbJ,QAAAA,OAAO,EAAEA,OAAO,CAACW,GAAD;AAJH,OAAf;AAOAA,MAAAA,GAAG,GAAGb,OAAO,CAACa,GAAD,EAAM,CAAN,CAAb;AACD;;AACDE,IAAAA,KAAK,CAACG,KAAN,CAAYM,IAAZ,CAAiBJ,IAAjB;AACD;;AAED,SAAOL,KAAP;AACD","sourcesContent":["import {\n  startOfWeek,\n  endOfWeek,\n  startOfMonth,\n  endOfMonth,\n  getISOWeek,\n  addDays,\n  isSameMonth,\n  isToday\n} from 'date-fns';\n\nexport const monthTitles = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];\nexport const dayTitles = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];\n\nexport function startOfCalendar(date) {\n  return startOfWeek(startOfMonth(date));\n}\n\nexport function endOfCalendar(date) {\n  return endOfWeek(endOfMonth(date));\n}\n\nexport function getDayId(date) {\n  return `${date.getFullYear()}_${date.getMonth()}_${date.getDate()}`;\n}\n\nexport function createMonthCalendar(date) {\n  let day = startOfCalendar(date);\n  const end = endOfCalendar(date);\n\n  const month = {\n    id: `${day.getFullYear()}_${day.getMonth()}`,\n    title: `${monthTitles[date.getMonth()]} ${date.getFullYear()}`,\n    weeks: []\n  };\n\n  while (day <= end) {\n    const weekNumber = getISOWeek(endOfWeek(day));\n    const week = {\n      id: `${day.getFullYear()}_${weekNumber}`,\n      number: weekNumber,\n      days: []\n    };\n\n    for (let i = 0; i < 7; i++) {\n      week.days.push({\n        id: getDayId(day),\n        date: day,\n        isSameMonth: isSameMonth(day, date),\n        isToday: isToday(day)\n      });\n\n      day = addDays(day, 1);\n    }\n    month.weeks.push(week);\n  }\n\n  return month;\n}\n"]},"metadata":{},"sourceType":"module"}